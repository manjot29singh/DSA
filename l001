import java.util.Scanner;

public class l001{
   public static Scanner sc = new Scanner (System.in);

   //PATTERN


   //to print table 
    public static void printtable(int n){
        for(int i=1 ; i<=10 ; i++)
        {
            System.out.println(n + "*" + i + "=" + n*i);
        }
    }

    //to print table til a given number
    public static void printtabletillm(int m){
        for(int i =1; i<=m ; i++)
        {
            printtable(i);
            System.out.println("");
        }
    }
    //assigning the value to the variable 
    public static void givingvalue(int b)
    {
        for (int i=1 ; i<=b ; i++)
        {   
            int c = sc.nextInt();
            odd_evn(c);
            
            
        }
    }
    //checking it for odd or even.
    public static void odd_evn(int c)
    {
        if(c % 2 == 0)
        {
            System.out.println("The number is even");
        }
        else
        {
        System.out.println("The number is odd");
        }
    }
    //is a prime?
    public static boolean isprime(int n)
    {   
        for(int i=2 ; i*i <= n ; i++)
        {
            if(n % i == 0)
            {   
                return false;
            }   
        }
        return true;
    }
     //checking aur printing the prime or not prime.
    public static void giving(int t)
    {
        int i;
        for( i=1; i<=t ; i++)
        {
            int n = sc.nextInt();
            isprime(n);
            if(isprime(n))
            {
                System.out.println("prime" );      
            }
            else
            {
            System.out.println("not prime "  );      
            }
         }
    }
    //print all the primes till n
    public static void primestilln(int low , int high)
    {
        for( int i= low ; i <=high ; i++)
        {
            if(isprime(i))
            {
                System.out.println(i);
            }
        }
    }
    //print all fibonacci number till n
    public static void fibonacci(int n)
    {
        int a = 0;
        int b = 1;
        for(int i=0 ; i<n ; i++)
        {
            System.out.println(a);
            int c = a + b;
            a = b;
            b =c;
        }
    }
    //counting the number of digits in  a given number
    public static int countdigits(int n)
    {
        int count=0;
        while(n != 0)
        {
            n = n/10;
            count++;
        }
        return count;
    }
    //reverseing the given number
    public static int reverse(int n)
    {
        int lastdigit = 0;
        int ans=0;
        while(n != 0)
        {
            lastdigit = n % 10;
            n /= 10;
            ans = ans * 10 + lastdigit ;
        }
        System.out.println(ans + 7);     
        return ans;
    }
    //finding the gcd of the two numbers
    public static int gcd(int a, int b)
    {
        int dividend =a;
        int divisor =b;
        while(dividend % divisor != 0)
        {
            int remainder = dividend % divisor;
            dividend = divisor;
            divisor = remainder;
        }
        return divisor;    
    }
     //finding the lcm of 2 numbers using the gcd formula 
    public static int lcm(int a, int b, int gcd)
    {
        return (a * (b / gcd));//here we first perform the (/) opertn bcs if we (*) these numbers first then then they can exceed the number range.

    }
    // finding if 3 numbers are pythagorous triplet or not ?
        public static boolean pythagorean_triplet(int a, int b, int c)
    {
        if(a * a + b * b ==c*c || a*a + c*c == b*b || c*c + b*b == a*a)
        {
            return true;
        }
        return false;
    }
     //to rotate a number 
    public static int rotate(int n , int r)
    {   
        int lenght = countdigits(n);
        r = r%lenght;
        if(r<0)
        {
            r = r+lenght;
        }


        
        int mul =1;
        int div =1;
        for(int i=1 ; i<=lenght ; i++)
        {
            if(i<=r)
            {
                div=div*10;
            }
            else
            {
                mul=mul*10; 
            }
        }
        int a = n % div;
        int b= n / div;
        return a * mul + b;
    }
    //Calculating the number of zeros behind 1 (10000........)
     public static int powerof10(int n)
     {
         n = n/10;
         int power = 1;
         while(n != 0){
             n /= 10;
             power *= 10;
         }
       return power;
     }


