import java.util.*;
public class btd{
    public static Scanner sc = new Scanner(System.in);
    //Decimal to any base (Always think to convert in binary using 2 after that change  to "b")
    public static long dtab(long n, long b)
    {
        long pow =1, res=0;
        while( n != 0)
        {
            long lastdigit = n % b;
            n = n/b;
            res = res + lastdigit * pow;
            pow = pow*10;
        }
        return res;
    }
    //Any base to decimal
    public static long abtd(long n, long b)
    {
        long pow=1, resl = 0;
        while( n != 0 )
        {
            long lastdigit= n % 10;
            n=n/10;
            resl += lastdigit * pow;
            pow = pow*b;
        }
        return resl;
    }
    //Any base to Any base
    public static long abtd1(long n, long b)
    {
        long pow=1, resl = 0;
        while( n != 0 )
        {
            long lastdigit= n % 10;
            n=n/10;
            resl += lastdigit * pow;
            pow = pow*b;
        }
        return resl;
    }
    public static long dtab1(long n, long b)
    {
        long pow =1, res=0;
        while( n != 0)
        {
            long lastdigit = n % b;
            n = n/b;
            res = res + lastdigit * pow;
            pow = pow*10;
        }
        return res;
    }
    //Binary addition 
    public static long binaryaddition(long a, long b , long base)
    {
        long carry=0,res=0,pow=1,ld=0;
        while( a!=0 || b!=0 || carry!=0) 
        {   
            long x= a%10;
            long y = b%10;
            long z= x + y + carry;
            a = a/10;
            b = b/10;
             ld= z % base;
            carry = z / base;

            res = res + ld * pow;
            pow = pow*10;
        }
        return res;   
    }
    //Binary Subtraction
    public static long binarysubtraction(long n1, long n2, long b)
    {
        long borrow=0,sum=0,pow=1,res=0;
        while(n1 != 0 || n2 != 0)
        {
            long x = n1%10;
            long y = n2%10;
            if(x+borrow>=y)
            {
                sum=x-y+borrow;
                borrow=0;
            }
            else 
            {
                sum= x-y + b + borrow;
                borrow= -1;
            }
            n1=n1/10;
            n2=n2/10;

            res= res + sum*pow;
            pow= pow*10;
        }
        return res;
    }
    
     //Binary multiplication
    public static int multiplywithsingledigit(int base, int n1, int d2)
    {
        int res=0,carry=0,pow=1;
        while(carry!=0 || n1!=0)// if carry is there or n1 has number we have to work till then
        {
            int d1 = n1%10;// getting last digit of n1
            n1=n1/10;//decreasing the number
            int multiply=d1*d2+carry;//REAL MULTIPLICATION
            carry=multiply/base;//making carry as in case of base 8 the carry always divided by 8 to give ans in form of 8^1+3,here "1" is the carry
            multiply=multiply%base;//beacause we need remainder in the range of base as in case of base 8 the no cant exceed 7 
            res=res+multiply*pow;
            pow=pow*10;
        }
        return res;
    }
    public static long MULTIPLICATION(int base , int n1 , int n2 )
    {
        long result=0,pow=1;
        while(n2!=0)
        {
        int d2= n2%10;
        n2=n2/10;
        int fpr=multiplywithsingledigit(base,n1,d2);
        result=binaryaddition(result,fpr *pow ,base);
        pow=pow*10;
        }
        return result;
    }
    
    //Maximum of a array
    public static int maximum(int[] arr)
    {
        int maxele = -(int)1e9;
        for(int element : arr)
        {
            if(element > maxele)
            {
                maxele=element;
            }
        }
        return maxele;
    }
    //Minimum of a array
    public static int  minimum(int[] arr)
    {
        int minele=(int).1e9;
        for(int element : arr)
        {
            if(element<minele)
            {
                minele=element;
            }
        }
        return minele;
    }
    //Generating the array.
    public static int[] array()
    {   
        int n=0;
         n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n ; i++)
        {
            arr[i]= sc.nextInt();
        }
        return arr; 

        //printarray(arr); 
        public static void printarray(int[] arr)
    {
        int data=sc.nextInt();
        for(int i=0;i<arr.length;i++)
            {
            System.out.println(arr[i] +"");
            }
            find(arr,data);
    }
    }
    
    //Finding a element in a array.
    public static int find(int[] arr, int d)
    {
        int index=-1;
        for(int i=0;i<arr.length;i++)   
        {
            if (arr[i]==d)
            {
                index=i;
                break;
            }           
        }
        System.out.println(index);
        return 0; 
    }
    // Digits Frequency
    public static int getDigitFrequency(int n, int d) { 
        int count = 0;
        if (n == 0) {
            System.out.println("empty");
        } else {
            while (n > 0) {
                int mod = n % 10;
                if (mod == d) {
                    count++;
                    n /= 10;
                } else {
                    n /= 10;
                }
            }
        }
        return count;
    }
    
    // Span of a Array
    public static int span(int[] arr) {
        int max = arr[0];
        int min = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        return max - min;
    }
    
     // Ceil floor
    public static void ceilfloor(int[]arr)
    {
        int low = 0;
        int high = arr.length - 1;
        int ceil = 0;
        int floor = 0;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (data < arr[mid]) {
                high = mid - 1;
                ceil = arr[mid];
            } else if (data > arr[mid]) {
                low = mid + 1;
                floor = arr[mid];
            } else {
                ceil = arr[mid];
                floor = arr[mid];
            }
        }
        System.out.println(ceil);
        System.out.println(floor);
    } 
    
     // First And Last Index
    public static void firstandlastindexofarray(int[] arr)
    {
        // to find frist index
        int low = 0;
        int high = arr.length - 1;
        int f1 = -1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (data < arr[mid]) {
                high = mid - 1;

            } else if (data > arr[mid]) {
                low = mid + 1;

            } else {
                f1 = mid;
                high = mid - 1;
            }
        }
        System.out.println(f1);
        //   to find f2=lastindex

        low = 0;
        high = arr.length - 1;
        int f2 = -1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (data < arr[mid]) {
                high = mid - 1;

            } else if (data > arr[mid]) {
                low = mid + 1;

            } else {
                f2 = mid;
                low = mid + 1;
            }
        }
        System.out.println(f2);
    }
    
     //Reversing the element
    public static void array1()
        {   
            int n=0,si=0,ei=0;
             n = sc.nextInt();
            int[] arr = new int[n];
            for(int i=0; i<n ; i++)
            {
                arr[i]= sc.nextInt();
            } 
           reverse(arr,n,si,ei);
        }
        
        public static void reverse(int[] arr,int num ,int si,int ei)
    {
        si=0;
        ei=num-1;
        int temp;
        while(si<ei)
            {
                temp=arr[si];
                arr[si] = arr[ei];
                arr[ei]=temp;
                si++;
                ei--;
            }
        for(int i=0; i<=num-1; i++)
            {
                System.out.print(arr[i]);
            }
    }
    
     

  
  
  
  
  }
   
