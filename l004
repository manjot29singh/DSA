import java.util.Scanner;
public class l004
{
public static Scanner sc = new Scanner(System.in);

    //Generating a 2d Array
    public static int[][] input()
    {
        int n=sc.nextInt();
        int m =sc.nextInt();
        int[][] arr=new int[n][m];
        n=arr.length;
        m=arr[0].length;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                arr[i][j]=sc.nextInt();

            }
        }
            return arr;
    }
    
    //Display the 2d Array
    public static void display(int[][] arr)
    {
        int n=arr.length;
        int m=arr[0].length;
        for(int i=0;i<n;i++)
        {
                for(int j=0; j<m;j++)
                {
                    System.out.print(arr[i][j] + " ");
                }
            System.out.println();
        }
    }
    //Display with ENHANCED FOR LOOP
    public static void displaying(int[][] arr)
    {
        for(int[]ar:arr)
        {
            for(int ele : ar)
            {
                System.out.println(ele + " ");
            }
            System.out.println();
        }
    }
    
    //Maximum of 2d array
    public static int maximum(int[][] arr)
    {
       
        int max = (int)-1e9;
        for(int[]i:arr)
        {
            for(int ele: i)
            {   
                if(ele>max)
                {
                    max=ele;
                }
            }
        }
    return max;
    }
    
    // Minimum of 2d array
    public static int minimum(int[][] arr)
    {
        int min = (int).1e9;
        for(int []a : arr)
        {
            for(int ele : a)
            {
                if(ele<min)
                {
                    min=ele;
                }   
            }
        }
        return min;
    }
    
    // Finding element in 2d
    public static void find(int[][] arr)
    {
        int ques=sc.nextInt();
        int data=ques;
        int index1=-1,index2=-1;
        for(int i=0;i<=arr.length-1;i++)
        {
            for(int j=0; j<arr[0].length; j++)
            {
                if(arr[i][j]==data)
                {
                    index1=i;
                    index2=j;
                    break;
                }
            }
        }
        System.out.println(index1);
        System.out.println(index2);
    }
     // Left to Right  Traversing
    public static void leftrighttraversal(int[][] arr)
    {
        for(int i=0; i<arr.length; i++)
        {
            if(i % 2 == 0)
                {
                    for(int j=0;j<arr[0].length;j++)
                    {
                         System.out.print(arr[i][j] + " ");
                    } 
                }
                else
                {
                    for(int j=arr[0].length-1 ; j>=0 ; j--)
                     {
                         System.out.print(arr[i][j] + " ");
                     }
                }
         System.out.println();   
        }
    }
    
     // Up to Down Traversing
    public static void UpDowntraversal(int[][] arr)
    {
        for(int j=0; j<arr.length; j++)
        {
            if(j % 2 == 0)
                {
                    for(int i=0;i<arr[0].length;i++)
                    {
                         System.out.print(arr[i][j] + " ");
                    } 
                }
                else
                {
                    for(int i=arr[0].length-1; i>=0 ; i--)
                     {
                         System.out.print(arr[i][j] +" " );
                     }
                }
         System.out.println();   
        }
    }
    
    //  DIAGONAL Traversing
    public static void diagonal(int[][] arr)
    {
        for(int gap=0;gap<arr.length;gap++)
        {
            for(int i=0 , j=gap ;  i<=arr.length-1 && j<=arr.length-1 ; i++,j++)
            {
                System.out.println(arr[i][j]);
            }
        }
    }
    
    // Rotate the 2d array in (+90) degree
    public static void rotateby90(int[][] arr)
    {
        int n=arr.length;
        int m=arr[0].length;
        for(int j=0; j<m;j++)
        {
                for(int i=n-1;i>=0;i--)
                {
                    System.out.print(arr[i][j] + " ");
                }
            System.out.println();
        }
    }
    
     // spiral
    public static void spiral(int[][] arr) {
        int n = arr.length;
        int m = arr[0].length;
        int rmin = 0, cmin = 0, rmax = n - 1, cmax = m - 1;
        int tne = n * m;
        while (tne > 0) {
            for (int i = rmin; i <= rmax && tne > 0; i++) {
                tne--;
                System.out.println(arr[i][cmin]);
            }
            cmin++;
            for (int i = cmin; i <= cmax && tne > 0; i++) {
                tne--;
                System.out.println(arr[rmax][i]);
            }
            rmax--;
            for (int i = rmax; i >= rmin && tne > 0; i--) {
                tne--;
                System.out.println(arr[i][cmax]);
            }
            cmax--;
            for (int i = cmax; i >= cmin && tne > 0; i--) {
                tne--;
                System.out.println(arr[rmin][i]);
            }
           rmin++;
        }
    }
    
    // Search in a 2D array
    public static void search(int[][] arr,int find)
    {
        int n =arr.length;
         int i =n-1;
         int j =0;
         boolean flag=false;
        while(i>=0 && j<n)
        {
            if(arr[i][j]==find)
            {
                System.out.println(i);
                System.out.println(j);
                flag=true;
                break;
            }
            else if(arr[i][j] > find)
            {
                i--;
            }
            else {
                j++;        
        

            }
        }
        if(!flag)
            System.out.println("notfound");
    }
    
    // exitpoint error

    public static void exitpoint()
    {
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] arr = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = sc.nextInt();
            }
        }

        int dir = 0;
        int i = 0, j = 0;
        while (true) {
            dir = (dir + arr[i][j]) % 4;
            if (dir == 0) {
                j++;
            } else if (dir == 1) {
                i++;
            } else if (dir == 2) {
                j--;
            } else {
                i--;
            }
            // condition on which point exits.
            if (i < 0) {
                i++;
                break;
            } else if (j < 0) {
                j++;
                break;
            } else if (i == arr.length) {
                i--;
                break;
            } else if (j == arr[0].length) {
                j--;
                break;
            }
        }
        System.out.println(i);
        System.out.println(j);
    }
    
     public static void manipulation(int[][] queries){
        int a=0,b=0,k=0; 
        long i=0;       
    
    for(int f=0;f<queries.length;f++){
            int x=0;

            a =  queries[f][x++];
            b =  queries[f][x++];
            k =  queries[f][x];
            System.out.println(a +" "+ b +" "+ k);
        }
    }
    
    public static void main (String[] args)
    {   
        int[][] arr1 = input();
        display(arr1);
        
    }
    
    
    
    
    
    
    
    
}
