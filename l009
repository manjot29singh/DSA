public  class linkedlist{
    private class Node{
        int data = 0;
        Node next = null;

        Node(int data){
            this.data = data;
        }
    }
    private Node head = null;
    private Node tail = null;
    private int sizeofll = 0;

    public boolean isempty(){
        return sizeofll == 0;
    }
    public int size(){
        return sizeofll;
    }
    
    public void display()
    {
        Node start = this.head;
        while(start != null)
        {
            System.out.print(start.data + "->");
            start=start.next;
        }
        System.out.println();
    }
    //Exception======================================
    public void emptyexception() throws Exception
    {
        if(this.sizeofll==0){
            throw new Exception("Linked List is EMPTY : -1");
        }

    }
    public void IndexOutOfBoundSizeExclusiveException(int idx) throws Exception
    {
        //to check either given index is valid or not ..{ IDX == SIZE P ADD NHI KRNEDEGA }
        if(idx < 0 || idx >= this.sizeofll){
            throw new Exception("Index Out of Bound : -1");
        }
    }
    public void IndexOutOfBoundSizeInclusiveException(int idx) throws Exception
    {
        //to check either given index is valid or not .. (IDX == SIZE P ADD KRSKTE H ) 
        if(idx < 0 || idx > this.sizeofll){
            throw new Exception("Index Out of Bound : -1");
        }
    }
    //Add===========================================
    private void addfirstnode(Node node)
    {
        if(this.head==null){
            this.head = node;
            this.tail = node;
        }
        else{
            node.next=head;
            this.head=node;
        }
        this.sizeofll++;
    }
    public void addfirst(int data)
    {
        Node node1 = new Node(data);
        addfirstnode(node1);
    }


    
