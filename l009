public  class linkedlist{
    private class Node{
        int data = 0;
        Node next = null;

        Node(int data){
            this.data = data;
        }
    }
    private Node head = null;
    private Node tail = null;
    private int sizeofll = 0;

    public boolean isempty(){
        return sizeofll == 0;
    }
    public int size(){
        return sizeofll;
    }
    
    public void display()
    {
        Node start = this.head;
        while(start != null)
        {
            System.out.print(start.data + "->");
            start=start.next;
        }
        System.out.println();
    }
    //Exception======================================
    public void emptyexception() throws Exception
    {
        if(this.sizeofll==0){
            throw new Exception("Linked List is EMPTY : -1");
        }

    }
    public void IndexOutOfBoundSizeExclusiveException(int idx) throws Exception
    {
        //to check either given index is valid or not ..{ IDX == SIZE P ADD NHI KRNEDEGA }
        if(idx < 0 || idx >= this.sizeofll){
            throw new Exception("Index Out of Bound : -1");
        }
    }
    public void IndexOutOfBoundSizeInclusiveException(int idx) throws Exception
    {
        //to check either given index is valid or not .. (IDX == SIZE P ADD KRSKTE H ) 
        if(idx < 0 || idx > this.sizeofll){
            throw new Exception("Index Out of Bound : -1");
        }
    }
    //Add===========================================
    private void addfirstnode(Node node)
    {
        if(this.head==null){
            this.head = node;
            this.tail = node;
        }
        else{
            node.next=head;
            this.head=node;
        }
        this.sizeofll++;
    }
    public void addfirst(int data)
    {
        Node node1 = new Node(data);
        addfirstnode(node1);
    }
    private void addlastnode(Node node1)
    {
        if(this.head==null){
            this.head=node1;
            this.tail=node1;
        }
        else{
            this.tail.next=node1;
            this.tail=node1;
        }
        this.sizeofll++;
    }

    public void addlast(int data)
    {
        Node node1 =new Node(data);
        addlastnode(node1);
    }
    private void addatNode(int idx,Node node)
    {
        if(idx == 0){
            addfirstnode(node);
        }
        else if(idx == this.sizeofll){
            addlastnode(node);
        }
        else{
            Node prev = getnodeatidx(idx-1);
            Node forw = prev.next;

            prev.next = node;
            node.next       = forw;
            this.sizeofll++;//IMPORTANT POINT
        }
    }
    private void addatNode(int idx,Node node)
    {
        if(idx == 0){
            addfirstnode(node);
        }
        else if(idx == this.sizeofll){
            addlastnode(node);
        }
        else{
            Node prev = getnodeatidx(idx-1);
            Node forw = prev.next;

            prev.next = node;
            node.next       = forw;
            this.sizeofll++;//IMPORTANT POINT
        }
    }
    public void addat(int idx,int data)throws Exception
    {
        IndexOutOfBoundSizeInclusiveException(idx);
        Node node = new Node(data);
        addatNode(idx,node);
    }
     //===================================
    //get functions
    public int getfirstnodedata() throws Exception
    {
        emptyexception();
        return this.head.data;
    }

    public int getlastnodedata()
    {
        return this.tail.data;
    }
     private Node getnodeatidx(int idx)
    {
        Node curr=this.head;
        while(idx--> 0){
            curr=curr.next;
        } 
        return curr;
    }
     public int getatidxdata(int idx)throws Exception
    {
        IndexOutOfBoundSizeExclusiveException(idx);
       Node node= getnodeatidx(idx);//that node will be provided here to and its data will be extracted to use further
       return node.data;
       
    }
     //Remove=====================================================
    private Node removefirstnode(){
        Node removenode = this.head;
        if(this.sizeofll==1){
            this.head=null;
            this.tail=null;
        }
        else{
            Node forw=this.head.next;
            this.head=forw;
        }
        this.sizeofll--;
        return removenode;
    }

    public int  removefirst() throws Exception{
        emptyexception();
        Node node = removefirstnode();
        return node.data;
    }
    
    private Node removelastnode(){
        Node removenode = this.tail;
        if(this.sizeofll==1){
            this.tail=null;
        }
        else{
            Node secondlastnode=getnodeatidx(sizeofll-2);
            this.tail=secondlastnode;
            secondlastnode.next=null;
        }
        this.sizeofll--;
        return removenode;
    }

    public int removelast()throws Exception{
        emptyexception();
        Node node=removelastnode();
        return node.data;
    }
    
    private Node removenodeat(int idx)
    {
        Node curr =null;
        if(idx==0){
            removefirstnode();
        }
        else if(idx==sizeofll){
            removelastnode();
        }
        else{
            Node prev = getnodeatidx(idx-1);
            curr = prev.next;
            Node forw = curr.next;

            prev.next=forw;
            curr.next=null;
            this.sizeofll--;
        }
        return curr;
        
        
    }
    
    public int removeat(int idx) throws Exception
    {
        emptyexception();
        Node node = removenodeat(idx);
        return node.data;

    }
    
    //26 feb===========================================================
    public int mid(){
        Node slow = head;
        Node fast = head;
        while(fast.next !=null && fast.next.next != null){//mid 1 =default for even ll.
            fast=fast.next.next;
            slow = slow.next;
        }
        return slow.data;
    }
    public void reversePI(){//97;40:00
        // we have to just turn the link form this 0->0->0-> to his 0<-0<-0<-0<-
        Node curr = this.head;
        Node prev = null;
        while(curr != null){
            Node forw = curr.next; // it starts the loop
            
            curr.next = prev; //MAIN PINT TO REMEMBER BCS IT TURNS THE LINK TO OPPOSITE SIDE
            prev = curr;//MOVE THEM TO NEXT;
            curr = forw;//MOVE THEM TO NEXT
        }
        tail = head; //MAKE THE TAIL AS NEW HEAD;
        head= prev;//AND WHEN CURR ==NULL AND LOOP BREAKS THEN OUR HEAD WILL BE AT PREV.
        
    } 
    
    public int length(){
        Node curr = this.head;
        int sizee = 0;
        while(curr != null){
            curr=curr.next;
            sizee++;
        }
        return sizee;
    }
    public Node getnodeat(int idx){
        Node curr = this.head;
        while(idx-->0){
            curr=curr.next;
        }
        return curr;
    }
    
    public void reverseDI() {
      // write your code here
      int i = 0;
      int j = length() - 1 ;
      while(i < j){
          Node in = getnodeat(i);//one pointer at start
          Node jn = getnodeat(j);// one at end
          
          int temp = in.data;//swap the data from start to end
          in.data = jn.data;
          jn.data = temp;
          
          i++;//increse i
          j--;//reduce j
      } 
    }
    





    
